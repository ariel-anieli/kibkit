#!/usr/bin/python

import argparse
import functools
import logging
import json
import random
import requests
import string
import sys

logging.basicConfig(stream=sys.stdout, format='%(message)s', level=logging.INFO)

parser = argparse.ArgumentParser()
parser.add_argument('-u', '--user-credentials', required=True)
parser.add_argument('-H', '--host',             required=True)
group  = parser.add_mutually_exclusive_group(required=True)

group.add_argument('-fd',  '--find-dashboard', nargs='?', const=True)
group.add_argument('-ld', '--list-dashboard')
group.add_argument('-sva', '--show-visualization-aggregations')
group.add_argument('-svd', '--show-visualization-data')
args = parser.parse_args()        

vz_and_db = (args.show_visualization_aggregations.split(',')[0],
            args.show_visualization_aggregations.split(',')[1], False) \
            if args.show_visualization_aggregations \
            else (args.show_visualization_data.split(',')[0],
                  args.show_visualization_data.split(',')[1], True) \
            if args.show_visualization_data else None

gen_rdm_hex = lambda i : random.choice(string.hexdigits)

base = 'http://{}@{}'.format(args.user_credentials, args.host)
head = {'Content-Type' : 'application/json',
        'kbn-xsrf'     : ''.join(map(gen_rdm_hex, range(32)))
}

def get_id_and_tle_for_dashboards(objs):
    return [functools.reduce(
        lambda _IN, FUNC: FUNC(_IN),
        [lambda obj: (obj["id"],obj["attributes"]["title"]),
         lambda pair: "{},{}".format(pair[0], pair[1])],
        obj) for obj in objs]

def get_params(query):
    url   = {'fd' : '/api/saved_objects/_find',
             'ld' : '/api/saved_objects/_bulk_get'}[query]

    _type = {'fd' : 'dashboard',
             'ld' : 'dashboard'}[query]

    return {'url'  : url,
            'type' : _type}

def parse_each_aggs(init, entry):

    if entry['type']=='avg':
        init['aggs'][entry['id']]  = {
            'avg': {
                'field' : entry['params']['field']
            }
        }
    
    elif entry['type']=='cardinality':
        init['aggs'][entry['id']]  = {
            'cardinality': {
                'field' : entry['params']['field']
            }
        }

    elif entry['type']=='terms':
        init['vars'][entry['id']] = {
            'terms': {
                'field' : entry['params']['field'],
                'order' : {
                    '_count' : entry['params']['order']
                },
                'size'  : entry['params']['size']
            }
        }

    return init

if __name__=="__main__":

    if args.find_dashboard:

        req  = lambda ARGS : requests.get(base + ARGS['url'],
                                          headers = head,
                                          params  = {'type': ARGS['type']})

        [functools.reduce(
            lambda _IN, FUNC: FUNC(_IN),
            [lambda param : req(get_params(param)),
             lambda rsp   : json.loads(rsp.text)["saved_objects"],
             lambda objs  : '\n'.join(get_id_and_tle_for_dashboards(objs)),
             logging.info],
            param) for param in ['fd']]
        
    elif args.list_dashboard:

        req  = lambda ARGS : requests.post(
            base + ARGS['url'],
            headers = head,
            json    = [{'type': ARGS['type'], 'id': args.list_dashboard}])

        rq_vz  = lambda _id: requests.post(
            base + get_params('ld')['url'],
            headers = head,
            json    = [{'type': 'visualization', 'id': _id}])

        get_vz_tle_in_dashboard = lambda objs: [functools.reduce(
            lambda _IN, FUNC: FUNC(_IN),
            [lambda obj  : rq_vz(obj['id']),
             lambda req  : json.loads(req.text),
             lambda resp : resp['saved_objects'][0]['attributes'],
             lambda rsp  : json.loads(rsp['visState'])['title']
            ], obj) for obj in objs if obj['type']=='visualization']

        [functools.reduce(
            lambda _IN, FUNC: FUNC(_IN),
            [lambda param : req(get_params(param)),
             lambda rsp   : json.loads(rsp.text),
             lambda obj   : obj['saved_objects'][0]['references'],
             lambda objs  : '\n'.join(get_vz_tle_in_dashboard(objs)),
             logging.info
            ], param) for param in ['ld']]

    elif args.show_visualization_aggregations \
         or args.show_visualization_data:
        viz, db, choice = vz_and_db

        def if_true_request_data(choice, aggs):
            if choice:
                return functools.reduce(
                    lambda _IN, FUNC: FUNC(_IN),
                    [parse_all_aggs,
                     build_payload_from_aggs,
                     rq_viz_data,
                     lambda rsp: json.loads(rsp.text)['aggregations']],
                    aggs)
            else:
                return aggs


        build_payload_from_aggs = lambda aggs: {
            'aggs' : {var_k : {'terms' : aggs['vars'][var_k]['terms'],
                               'aggs'  : aggs['aggs']}
                      for var_k in aggs['vars']}}

        req  = lambda ARGS: requests.post(
            base + ARGS['url'],
            headers = head,
            json    = [{'type': ARGS['type'], 'id': db}])

        parse_all_aggs = lambda vz_aggs: functools.reduce(
            parse_each_aggs, vz_aggs, {'vars':{}, 'aggs':{}})

        pick_vz_from_all = lambda vz_states: [state['aggs']
                                              for state in vz_states
                                              if state['title']==viz].pop()
        
        unpack_query = lambda rsp: json.loads(
            functools.reduce(lambda dct, key: dct[key],
                             ['saved_objects',
                              0,
                              'attributes',
                              'kibanaSavedObjectMeta',
                              'searchSourceJSON'],
                             json.loads(rsp.text)))#['filter'][0]['query']

        rq_vz  = lambda _id: requests.post(
            base + get_params('ld')['url'],
            headers = head,
            json    = [{'type': 'visualization', 'id': _id}])

        rq_viz_data = lambda QRY: requests.post(
            base + '/elasticsearch/dev_*/_search?',
            json    = QRY,
            headers = head,
            params  = {'timeout'                : '30000ms',
                       'rest_total_hits_as_int' : 'true',
                       'ignore_unavailable'     : 'true',
                       'ignore_throttled'       : 'true'})

        vz_states = lambda rsp: [functools.reduce(
            lambda _IN, FUNC: FUNC(_IN),
            [lambda obj  : rq_vz(obj['id']),
             lambda req  : json.loads(req.text),
             lambda resp : resp['saved_objects'][0]['attributes'],
             lambda rsp  : json.loads(rsp['visState'])
            ],
            OBJ)
        for OBJ in json.loads(rsp.text)['saved_objects'][0]['references']
        if OBJ['type']=='visualization']
        
        [functools.reduce(
            lambda _IN, FUNC: FUNC(_IN),
            [lambda param : req(get_params(param)),
             vz_states,
             pick_vz_from_all,
             lambda aggs: if_true_request_data(choice,aggs),
             json.dumps,
             logging.info],
            param) for param in ['ld']]
